import * as hks from "./generated";

const CrosschainNativeQiStablecoin = {
  useApprovalEvent: hks.useCrosschainNativeQiStablecoinApprovalEvent,
  useApprovalForAllEvent:
    hks.useCrosschainNativeQiStablecoinApprovalForAllEvent,
  useApprove: hks.useCrosschainNativeQiStablecoinApprove,
  useBalanceOf: hks.useCrosschainNativeQiStablecoinBalanceOf,
  useBorrowTokenEvent: hks.useCrosschainNativeQiStablecoinBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource:
    hks.useCrosschainNativeQiStablecoinChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainNativeQiStablecoinCheckCollateralPercentage,
  useCheckCost: hks.useCrosschainNativeQiStablecoinCheckCost,
  useCheckExtract: hks.useCrosschainNativeQiStablecoinCheckExtract,
  useCheckLiquidation: hks.useCrosschainNativeQiStablecoinCheckLiquidation,
  useClosingFee: hks.useCrosschainNativeQiStablecoinClosingFee,
  useCollateral: hks.useCrosschainNativeQiStablecoinCollateral,
  useCreateVault: hks.useCrosschainNativeQiStablecoinCreateVault,
  useCreateVaultEvent: hks.useCrosschainNativeQiStablecoinCreateVaultEvent,
  useDebtRatio: hks.useCrosschainNativeQiStablecoinDebtRatio,
  useDepositCollateral: hks.useCrosschainNativeQiStablecoinDepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainNativeQiStablecoinDepositCollateralEvent,
  useDepositNative: hks.useCrosschainNativeQiStablecoinDepositNative,
  useDestroyVault: hks.useCrosschainNativeQiStablecoinDestroyVault,
  useDestroyVaultEvent: hks.useCrosschainNativeQiStablecoinDestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainNativeQiStablecoinEthPriceSource,
  useEvent: hks.useCrosschainNativeQiStablecoinEvent,
  useExists: hks.useCrosschainNativeQiStablecoinExists,
  useGainRatio: hks.useCrosschainNativeQiStablecoinGainRatio,
  useGetApproved: hks.useCrosschainNativeQiStablecoinGetApproved,
  useGetClosingFee: hks.useCrosschainNativeQiStablecoinGetClosingFee,
  useGetDebtCeiling: hks.useCrosschainNativeQiStablecoinGetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainNativeQiStablecoinGetEthPriceSource,
  useGetOpeningFee: hks.useCrosschainNativeQiStablecoinGetOpeningFee,
  useGetPaid: hks.useCrosschainNativeQiStablecoinGetPaid,
  useGetTokenPriceSource:
    hks.useCrosschainNativeQiStablecoinGetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainNativeQiStablecoinIsApprovedForAll,
  useIsOwner: hks.useCrosschainNativeQiStablecoinIsOwner,
  useLiquidateVault: hks.useCrosschainNativeQiStablecoinLiquidateVault,
  useLiquidateVaultEvent:
    hks.useCrosschainNativeQiStablecoinLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainNativeQiStablecoinMaticDebt,
  useMinimumCollateralPercentage:
    hks.useCrosschainNativeQiStablecoinMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useCrosschainNativeQiStablecoinOpeningFee,
  useOwner: hks.useCrosschainNativeQiStablecoinOwner,
  useOwnerOf: hks.useCrosschainNativeQiStablecoinOwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainNativeQiStablecoinOwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainNativeQiStablecoinPayBackToken,
  usePayBackTokenEvent: hks.useCrosschainNativeQiStablecoinPayBackTokenEvent,
  usePriceSourceDecimals:
    hks.useCrosschainNativeQiStablecoinPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainNativeQiStablecoinRenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainNativeQiStablecoinSafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainNativeQiStablecoinSetApprovalForAll,
  useSetClosingFee: hks.useCrosschainNativeQiStablecoinSetClosingFee,
  useSetDebtRatio: hks.useCrosschainNativeQiStablecoinSetDebtRatio,
  useSetGainRatio: hks.useCrosschainNativeQiStablecoinSetGainRatio,
  useSetMinCollateralRatio:
    hks.useCrosschainNativeQiStablecoinSetMinCollateralRatio,
  useSetOpeningFee: hks.useCrosschainNativeQiStablecoinSetOpeningFee,
  useSetStabilityPool: hks.useCrosschainNativeQiStablecoinSetStabilityPool,
  useSetTokenUri: hks.useCrosschainNativeQiStablecoinSetTokenUri,
  useSetTreasury: hks.useCrosschainNativeQiStablecoinSetTreasury,
  useStabilityPool: hks.useCrosschainNativeQiStablecoinStabilityPool,
  useSupportsInterface: hks.useCrosschainNativeQiStablecoinSupportsInterface,
  useSymbol: hks.useCrosschainNativeQiStablecoinSymbol,
  useTokenByIndex: hks.useCrosschainNativeQiStablecoinTokenByIndex,
  useTokenOfOwnerByIndex:
    hks.useCrosschainNativeQiStablecoinTokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainNativeQiStablecoinTokenPeg,
  useTokenUri: hks.useCrosschainNativeQiStablecoinTokenUri,
  useTotalBorrowed: hks.useCrosschainNativeQiStablecoinTotalBorrowed,
  useTotalSupply: hks.useCrosschainNativeQiStablecoinTotalSupply,
  useTransferEvent: hks.useCrosschainNativeQiStablecoinTransferEvent,
  useTransferFrom: hks.useCrosschainNativeQiStablecoinTransferFrom,
  useTransferOwnership: hks.useCrosschainNativeQiStablecoinTransferOwnership,
  useTransferVaultEvent: hks.useCrosschainNativeQiStablecoinTransferVaultEvent,
  useTreasury: hks.useCrosschainNativeQiStablecoinTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainNativeQiStablecoinVaultCollateral,
  useVaultCount: hks.useCrosschainNativeQiStablecoinVaultCount,
  useVaultDebt: hks.useCrosschainNativeQiStablecoinVaultDebt,
  useWithdrawCollateral: hks.useCrosschainNativeQiStablecoinWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainNativeQiStablecoinWithdrawCollateralEvent,
  useWrite: hks.useCrosschainNativeQiStablecoinWrite,
  usePrepareApprove: hks.usePrepareCrosschainNativeQiStablecoinApprove,
  usePrepareBorrowToken: hks.usePrepareCrosschainNativeQiStablecoinBorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainNativeQiStablecoinBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainNativeQiStablecoinChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainNativeQiStablecoinCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainNativeQiStablecoinDepositCollateral,
  usePrepareDepositNative:
    hks.usePrepareCrosschainNativeQiStablecoinDepositNative,
  usePrepareDestroyVault:
    hks.usePrepareCrosschainNativeQiStablecoinDestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainNativeQiStablecoinGetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareCrosschainNativeQiStablecoinLiquidateVault,
  usePreparePayBackToken:
    hks.usePrepareCrosschainNativeQiStablecoinPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainNativeQiStablecoinRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainNativeQiStablecoinSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainNativeQiStablecoinSetApprovalForAll,
  usePrepareSetClosingFee:
    hks.usePrepareCrosschainNativeQiStablecoinSetClosingFee,
  usePrepareSetDebtRatio:
    hks.usePrepareCrosschainNativeQiStablecoinSetDebtRatio,
  usePrepareSetGainRatio:
    hks.usePrepareCrosschainNativeQiStablecoinSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainNativeQiStablecoinSetMinCollateralRatio,
  usePrepareSetOpeningFee:
    hks.usePrepareCrosschainNativeQiStablecoinSetOpeningFee,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainNativeQiStablecoinSetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainNativeQiStablecoinSetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainNativeQiStablecoinSetTreasury,
  usePrepareTransferFrom:
    hks.usePrepareCrosschainNativeQiStablecoinTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainNativeQiStablecoinTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainNativeQiStablecoinWithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainNativeQiStablecoinWrite,
} as const;

const CrosschainQiStablecoin = {
  useApprovalEvent: hks.useCrosschainNativeQiStablecoinApprovalEvent,
  useApprovalForAllEvent: hks.useCrosschainQiStablecoinApprovalForAllEvent,
  useApprove: hks.useCrosschainQiStablecoinApprove,
  useBalanceOf: hks.useCrosschainQiStablecoinBalanceOf,
  useBorrowTokenEvent: hks.useCrosschainQiStablecoinBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useCrosschainQiStablecoinChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainQiStablecoinCheckCollateralPercentage,
  useCheckCost: hks.useCrosschainQiStablecoinCheckCost,
  useCheckExtract: hks.useCrosschainQiStablecoinCheckExtract,
  useCheckLiquidation: hks.useCrosschainQiStablecoinCheckLiquidation,
  useClosingFee: hks.useCrosschainQiStablecoinClosingFee,
  useCollateral: hks.useCrosschainQiStablecoinCollateral,
  useCreateVault: hks.useCrosschainQiStablecoinCreateVault,
  useCreateVaultEvent: hks.useCrosschainQiStablecoinCreateVaultEvent,
  useDebtRatio: hks.useCrosschainQiStablecoinDebtRatio,
  useDepositCollateral: hks.useCrosschainQiStablecoinDepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainQiStablecoinDepositCollateralEvent,
  useDepositNative: hks.useCrosschainQiStablecoinDepositNative,
  useDestroyVault: hks.useCrosschainQiStablecoinDestroyVault,
  useDestroyVaultEvent: hks.useCrosschainQiStablecoinDestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainQiStablecoinEthPriceSource,
  useEvent: hks.useCrosschainQiStablecoinEvent,
  useExists: hks.useCrosschainQiStablecoinExists,
  useGainRatio: hks.useCrosschainQiStablecoinGainRatio,
  useGetApproved: hks.useCrosschainQiStablecoinGetApproved,
  useGetClosingFee: hks.useCrosschainQiStablecoinGetClosingFee,
  useGetDebtCeiling: hks.useCrosschainQiStablecoinGetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainQiStablecoinGetEthPriceSource,
  useGetOpeningFee: hks.useCrosschainQiStablecoinGetOpeningFee,
  useGetPaid: hks.useCrosschainQiStablecoinGetPaid,
  useGetTokenPriceSource: hks.useCrosschainQiStablecoinGetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainQiStablecoinIsApprovedForAll,
  useIsOwner: hks.useCrosschainQiStablecoinIsOwner,
  useLiquidateVault: hks.useCrosschainQiStablecoinLiquidateVault,
  useLiquidateVaultEvent: hks.useCrosschainQiStablecoinLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainQiStablecoinMaticDebt,
  useMinimumCollateralPercentage:
    hks.useCrosschainQiStablecoinMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useCrosschainQiStablecoinOpeningFee,
  useOwner: hks.useCrosschainQiStablecoinOwner,
  useOwnerOf: hks.useCrosschainQiStablecoinOwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainQiStablecoinOwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainQiStablecoinPayBackToken,
  usePayBackTokenEvent: hks.useCrosschainQiStablecoinPayBackTokenEvent,
  usePriceSourceDecimals: hks.useCrosschainQiStablecoinPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainQiStablecoinRenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainQiStablecoinSafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainQiStablecoinSetApprovalForAll,
  useSetClosingFee: hks.useCrosschainQiStablecoinSetClosingFee,
  useSetDebtRatio: hks.useCrosschainQiStablecoinSetDebtRatio,
  useSetGainRatio: hks.useCrosschainQiStablecoinSetGainRatio,
  useSetMinCollateralRatio: hks.useCrosschainQiStablecoinSetMinCollateralRatio,
  useSetOpeningFee: hks.useCrosschainQiStablecoinSetOpeningFee,
  useSetStabilityPool: hks.useCrosschainQiStablecoinSetStabilityPool,
  useSetTokenUri: hks.useCrosschainQiStablecoinSetTokenUri,
  useSetTreasury: hks.useCrosschainQiStablecoinSetTreasury,
  useStabilityPool: hks.useCrosschainQiStablecoinStabilityPool,
  useSupportsInterface: hks.useCrosschainQiStablecoinSupportsInterface,
  useSymbol: hks.useCrosschainQiStablecoinSymbol,
  useTokenByIndex: hks.useCrosschainQiStablecoinTokenByIndex,
  useTokenOfOwnerByIndex: hks.useCrosschainQiStablecoinTokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainQiStablecoinTokenPeg,
  useTokenUri: hks.useCrosschainQiStablecoinTokenUri,
  useTotalBorrowed: hks.useCrosschainQiStablecoinTotalBorrowed,
  useTotalSupply: hks.useCrosschainQiStablecoinTotalSupply,
  useTransferEvent: hks.useCrosschainQiStablecoinTransferEvent,
  useTransferFrom: hks.useCrosschainQiStablecoinTransferFrom,
  useTransferOwnership: hks.useCrosschainQiStablecoinTransferOwnership,
  useTransferVaultEvent: hks.useCrosschainQiStablecoinTransferVaultEvent,
  useTreasury: hks.useCrosschainQiStablecoinTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainQiStablecoinVaultCollateral,
  useVaultCount: hks.useCrosschainQiStablecoinVaultCount,
  useVaultDebt: hks.useCrosschainQiStablecoinVaultDebt,
  useWithdrawCollateral: hks.useCrosschainQiStablecoinWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainQiStablecoinWithdrawCollateralEvent,
  useWrite: hks.useCrosschainQiStablecoinWrite,
  usePrepareApprove: hks.usePrepareCrosschainQiStablecoinApprove,
  usePrepareBorrowToken: hks.usePrepareCrosschainQiStablecoinBorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainQiStablecoinBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainQiStablecoinChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainQiStablecoinCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainQiStablecoinDepositCollateral,
  usePrepareDepositNative: hks.usePrepareCrosschainQiStablecoinDepositNative,
  usePrepareDestroyVault: hks.usePrepareCrosschainQiStablecoinDestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainQiStablecoinGetPaid,
  usePrepareLiquidateVault: hks.usePrepareCrosschainQiStablecoinLiquidateVault,
  usePreparePayBackToken: hks.usePrepareCrosschainQiStablecoinPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainQiStablecoinRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainQiStablecoinSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainQiStablecoinSetApprovalForAll,
  usePrepareSetClosingFee: hks.usePrepareCrosschainQiStablecoinSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareCrosschainQiStablecoinSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareCrosschainQiStablecoinSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainQiStablecoinSetMinCollateralRatio,
  usePrepareSetOpeningFee: hks.usePrepareCrosschainQiStablecoinSetOpeningFee,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainQiStablecoinSetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainQiStablecoinSetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainQiStablecoinSetTreasury,
  usePrepareTransferFrom: hks.usePrepareCrosschainQiStablecoinTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainQiStablecoinTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainQiStablecoinWithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainQiStablecoinWrite,
} as const;

const CrosschainQiStablecoinV2 = {
  useApprovalEvent: hks.useCrosschainQiStablecoinV2ApprovalEvent,
  useApprovalForAllEvent: hks.useCrosschainQiStablecoinV2ApprovalForAllEvent,
  useApprove: hks.useCrosschainQiStablecoinV2Approve,
  useBalanceOf: hks.useCrosschainQiStablecoinV2BalanceOf,
  useBorrowTokenEvent: hks.useCrosschainQiStablecoinV2BorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useCrosschainQiStablecoinV2ChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainQiStablecoinV2CheckCollateralPercentage,
  useCheckCost: hks.useCrosschainQiStablecoinV2CheckCost,
  useCheckExtract: hks.useCrosschainQiStablecoinV2CheckExtract,
  useCheckLiquidation: hks.useCrosschainQiStablecoinV2CheckLiquidation,
  useClosingFee: hks.useCrosschainQiStablecoinV2ClosingFee,
  useCollateral: hks.useCrosschainQiStablecoinV2Collateral,
  useCreateVault: hks.useCrosschainQiStablecoinV2CreateVault,
  useCreateVaultEvent: hks.useCrosschainQiStablecoinV2CreateVaultEvent,
  useDebtRatio: hks.useCrosschainQiStablecoinV2DebtRatio,
  useDepositCollateral: hks.useCrosschainQiStablecoinV2DepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainQiStablecoinV2DepositCollateralEvent,
  useDestroyVault: hks.useCrosschainQiStablecoinV2DestroyVault,
  useDestroyVaultEvent: hks.useCrosschainQiStablecoinV2DestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainQiStablecoinV2EthPriceSource,
  useEvent: hks.useCrosschainQiStablecoinV2Event,
  useExists: hks.useCrosschainQiStablecoinV2Exists,
  useGainRatio: hks.useCrosschainQiStablecoinV2GainRatio,
  useGetApproved: hks.useCrosschainQiStablecoinV2GetApproved,
  useGetClosingFee: hks.useCrosschainQiStablecoinV2GetClosingFee,
  useGetDebtCeiling: hks.useCrosschainQiStablecoinV2GetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainQiStablecoinV2GetEthPriceSource,
  useGetPaid: hks.useCrosschainQiStablecoinV2GetPaid,
  useGetTokenPriceSource: hks.useCrosschainQiStablecoinV2GetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainQiStablecoinV2IsApprovedForAll,
  useIsOwner: hks.useCrosschainQiStablecoinV2IsOwner,
  useLiquidateVault: hks.useCrosschainQiStablecoinV2LiquidateVault,
  useLiquidateVaultEvent: hks.useCrosschainQiStablecoinV2LiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainQiStablecoinV2MaticDebt,
  useMinimumCollateralPercentage:
    hks.useCrosschainQiStablecoinV2MinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOwner: hks.useCrosschainQiStablecoinV2Owner,
  useOwnerOf: hks.useCrosschainQiStablecoinV2OwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainQiStablecoinV2OwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainQiStablecoinV2PayBackToken,
  usePayBackTokenEvent: hks.useCrosschainQiStablecoinV2PayBackTokenEvent,
  usePriceSourceDecimals: hks.useCrosschainQiStablecoinV2PriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainQiStablecoinV2RenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainQiStablecoinV2SafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainQiStablecoinV2SetApprovalForAll,
  useSetDebtRatio: hks.useCrosschainQiStablecoinV2SetDebtRatio,
  useSetGainRatio: hks.useCrosschainQiStablecoinV2SetGainRatio,
  useSetMinCollateralRatio:
    hks.useCrosschainQiStablecoinV2SetMinCollateralRatio,
  useSetStabilityPool: hks.useCrosschainQiStablecoinV2SetStabilityPool,
  useSetTokenUri: hks.useCrosschainQiStablecoinV2SetTokenUri,
  useSetTreasury: hks.useCrosschainQiStablecoinV2SetTreasury,
  useStabilityPool: hks.useCrosschainQiStablecoinV2StabilityPool,
  useSupportsInterface: hks.useCrosschainQiStablecoinV2SupportsInterface,
  useSymbol: hks.useCrosschainQiStablecoinV2Symbol,
  useTokenByIndex: hks.useCrosschainQiStablecoinV2TokenByIndex,
  useTokenOfOwnerByIndex: hks.useCrosschainQiStablecoinV2TokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainQiStablecoinV2TokenPeg,
  useTokenUri: hks.useCrosschainQiStablecoinV2TokenUri,
  useTotalBorrowed: hks.useCrosschainQiStablecoinV2TotalBorrowed,
  useTotalSupply: hks.useCrosschainQiStablecoinV2TotalSupply,
  useTransferEvent: hks.useCrosschainQiStablecoinV2TransferEvent,
  useTransferFrom: hks.useCrosschainQiStablecoinV2TransferFrom,
  useTransferOwnership: hks.useCrosschainQiStablecoinV2TransferOwnership,
  useTransferVaultEvent: hks.useCrosschainQiStablecoinV2TransferVaultEvent,
  useTreasury: hks.useCrosschainQiStablecoinV2Treasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainQiStablecoinV2VaultCollateral,
  useVaultCount: hks.useCrosschainQiStablecoinV2VaultCount,
  useVaultDebt: hks.useCrosschainQiStablecoinV2VaultDebt,
  useWithdrawCollateral: hks.useCrosschainQiStablecoinV2WithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainQiStablecoinV2WithdrawCollateralEvent,
  useWrite: hks.useCrosschainQiStablecoinV2Write,
  usePrepareApprove: hks.usePrepareCrosschainQiStablecoinV2Approve,
  usePrepareBorrowToken: hks.usePrepareCrosschainQiStablecoinV2BorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainQiStablecoinV2Burn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainQiStablecoinV2ChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainQiStablecoinV2CreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainQiStablecoinV2DepositCollateral,
  usePrepareDestroyVault: hks.usePrepareCrosschainQiStablecoinV2DestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainQiStablecoinV2GetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareCrosschainQiStablecoinV2LiquidateVault,
  usePreparePayBackToken: hks.usePrepareCrosschainQiStablecoinV2PayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainQiStablecoinV2RenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainQiStablecoinV2SafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainQiStablecoinV2SetApprovalForAll,
  usePrepareSetDebtRatio: hks.usePrepareCrosschainQiStablecoinV2SetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareCrosschainQiStablecoinV2SetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainQiStablecoinV2SetMinCollateralRatio,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainQiStablecoinV2SetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainQiStablecoinV2SetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainQiStablecoinV2SetTreasury,
  usePrepareTransferFrom: hks.usePrepareCrosschainQiStablecoinV2TransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainQiStablecoinV2TransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainQiStablecoinV2WithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainQiStablecoinV2Write,
} as const;

const CrosschainQiStablecoinSlim = {
  useApprovalEvent: hks.useCrosschainQiStablecoinSlimApprovalEvent,
  useApprovalForAllEvent: hks.useCrosschainQiStablecoinSlimApprovalForAllEvent,
  useApprove: hks.useCrosschainQiStablecoinSlimApprove,
  useBalanceOf: hks.useCrosschainQiStablecoinSlimBalanceOf,
  useBorrowTokenEvent: hks.useCrosschainQiStablecoinSlimBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource:
    hks.useCrosschainQiStablecoinSlimChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainQiStablecoinSlimCheckCollateralPercentage,
  useCheckCost: hks.useCrosschainQiStablecoinSlimCheckCost,
  useCheckExtract: hks.useCrosschainQiStablecoinSlimCheckExtract,
  useCheckLiquidation: hks.useCrosschainQiStablecoinSlimCheckLiquidation,
  useClosingFee: hks.useCrosschainQiStablecoinSlimClosingFee,
  useCollateral: hks.useCrosschainQiStablecoinSlimCollateral,
  useCreateVault: hks.useCrosschainQiStablecoinSlimCreateVault,
  useCreateVaultEvent: hks.useCrosschainQiStablecoinSlimCreateVaultEvent,
  useDebtRatio: hks.useCrosschainQiStablecoinSlimDebtRatio,
  useDepositCollateral: hks.useCrosschainQiStablecoinSlimDepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainQiStablecoinSlimDepositCollateralEvent,
  useDestroyVault: hks.useCrosschainQiStablecoinSlimDestroyVault,
  useDestroyVaultEvent: hks.useCrosschainQiStablecoinSlimDestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainQiStablecoinSlimEthPriceSource,
  useEvent: hks.useCrosschainQiStablecoinSlimEvent,
  useExists: hks.useCrosschainQiStablecoinSlimExists,
  useGainRatio: hks.useCrosschainQiStablecoinSlimGainRatio,
  useGetApproved: hks.useCrosschainQiStablecoinSlimGetApproved,
  useGetClosingFee: hks.useCrosschainQiStablecoinSlimGetClosingFee,
  useGetDebtCeiling: hks.useCrosschainQiStablecoinSlimGetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainQiStablecoinSlimGetEthPriceSource,
  useGetPaid: hks.useCrosschainQiStablecoinSlimGetPaid,
  useGetTokenPriceSource: hks.useCrosschainQiStablecoinSlimGetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainQiStablecoinSlimIsApprovedForAll,
  useIsOwner: hks.useCrosschainQiStablecoinSlimIsOwner,
  useLiquidateVault: hks.useCrosschainQiStablecoinSlimLiquidateVault,
  useLiquidateVaultEvent: hks.useCrosschainQiStablecoinSlimLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainQiStablecoinSlimMaticDebt,
  useMinimumCollateralPercentage:
    hks.useCrosschainQiStablecoinSlimMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOwner: hks.useCrosschainQiStablecoinSlimOwner,
  useOwnerOf: hks.useCrosschainQiStablecoinSlimOwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainQiStablecoinSlimOwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainQiStablecoinSlimPayBackToken,
  usePayBackTokenEvent: hks.useCrosschainQiStablecoinSlimPayBackTokenEvent,
  usePriceSourceDecimals: hks.useCrosschainQiStablecoinSlimPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainQiStablecoinSlimRenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainQiStablecoinSlimSafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainQiStablecoinSlimSetApprovalForAll,
  useSetDebtRatio: hks.useCrosschainQiStablecoinSlimSetDebtRatio,
  useSetGainRatio: hks.useCrosschainQiStablecoinSlimSetGainRatio,
  useSetMinCollateralRatio:
    hks.useCrosschainQiStablecoinSlimSetMinCollateralRatio,
  useSetStabilityPool: hks.useCrosschainQiStablecoinSlimSetStabilityPool,
  useSetTokenUri: hks.useCrosschainQiStablecoinSlimSetTokenUri,
  useSetTreasury: hks.useCrosschainQiStablecoinSlimSetTreasury,
  useStabilityPool: hks.useCrosschainQiStablecoinSlimStabilityPool,
  useSupportsInterface: hks.useCrosschainQiStablecoinSlimSupportsInterface,
  useSymbol: hks.useCrosschainQiStablecoinSlimSymbol,
  useTokenByIndex: hks.useCrosschainQiStablecoinSlimTokenByIndex,
  useTokenOfOwnerByIndex: hks.useCrosschainQiStablecoinSlimTokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainQiStablecoinSlimTokenPeg,
  useTokenUri: hks.useCrosschainQiStablecoinSlimTokenUri,
  useTotalBorrowed: hks.useCrosschainQiStablecoinSlimTotalBorrowed,
  useTotalSupply: hks.useCrosschainQiStablecoinSlimTotalSupply,
  useTransferEvent: hks.useCrosschainQiStablecoinSlimTransferEvent,
  useTransferFrom: hks.useCrosschainQiStablecoinSlimTransferFrom,
  useTransferOwnership: hks.useCrosschainQiStablecoinSlimTransferOwnership,
  useTransferVaultEvent: hks.useCrosschainQiStablecoinSlimTransferVaultEvent,
  useTreasury: hks.useCrosschainQiStablecoinSlimTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainQiStablecoinSlimVaultCollateral,
  useVaultCount: hks.useCrosschainQiStablecoinSlimVaultCount,
  useVaultDebt: hks.useCrosschainQiStablecoinSlimVaultDebt,
  useWithdrawCollateral: hks.useCrosschainQiStablecoinSlimWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainQiStablecoinSlimWithdrawCollateralEvent,
  useWrite: hks.useCrosschainQiStablecoinSlimWrite,
  usePrepareApprove: hks.usePrepareCrosschainQiStablecoinSlimApprove,
  usePrepareBorrowToken: hks.usePrepareCrosschainQiStablecoinSlimBorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainQiStablecoinSlimBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainQiStablecoinSlimChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainQiStablecoinSlimCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainQiStablecoinSlimDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareCrosschainQiStablecoinSlimDestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainQiStablecoinSlimGetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareCrosschainQiStablecoinSlimLiquidateVault,
  usePreparePayBackToken: hks.usePrepareCrosschainQiStablecoinSlimPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainQiStablecoinSlimRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainQiStablecoinSlimSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainQiStablecoinSlimSetApprovalForAll,
  usePrepareSetDebtRatio: hks.usePrepareCrosschainQiStablecoinSlimSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareCrosschainQiStablecoinSlimSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainQiStablecoinSlimSetMinCollateralRatio,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainQiStablecoinSlimSetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainQiStablecoinSlimSetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainQiStablecoinSlimSetTreasury,
  usePrepareTransferFrom: hks.usePrepareCrosschainQiStablecoinSlimTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainQiStablecoinSlimTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainQiStablecoinSlimWithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainQiStablecoinSlimWrite,
} as const;

const CrosschainQiStablecoinSlimV2 = {
  useApprovalEvent: hks.useCrosschainQiStablecoinSlimV2ApprovalEvent,
  useApprovalForAllEvent:
    hks.useCrosschainQiStablecoinSlimV2ApprovalForAllEvent,
  useApprove: hks.useCrosschainQiStablecoinSlimV2Approve,
  useBalanceOf: hks.useCrosschainQiStablecoinSlimV2BalanceOf,
  useBorrowTokenEvent: hks.useCrosschainQiStablecoinSlimV2BorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource:
    hks.useCrosschainQiStablecoinSlimV2ChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainQiStablecoinSlimV2CheckCollateralPercentage,
  useCheckCost: hks.useCrosschainQiStablecoinSlimV2CheckCost,
  useCheckExtract: hks.useCrosschainQiStablecoinSlimV2CheckExtract,
  useCheckLiquidation: hks.useCrosschainQiStablecoinSlimV2CheckLiquidation,
  useClosingFee: hks.useCrosschainQiStablecoinSlimV2ClosingFee,
  useCollateral: hks.useCrosschainQiStablecoinSlimV2Collateral,
  useCreateVault: hks.useCrosschainQiStablecoinSlimV2CreateVault,
  useCreateVaultEvent: hks.useCrosschainQiStablecoinSlimV2CreateVaultEvent,
  useDebtRatio: hks.useCrosschainQiStablecoinSlimV2DebtRatio,
  useDepositCollateral: hks.useCrosschainQiStablecoinSlimV2DepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainQiStablecoinSlimV2DepositCollateralEvent,
  useDestroyVault: hks.useCrosschainQiStablecoinSlimV2DestroyVault,
  useDestroyVaultEvent: hks.useCrosschainQiStablecoinSlimV2DestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainQiStablecoinSlimV2EthPriceSource,
  useEvent: hks.useCrosschainQiStablecoinSlimV2Event,
  useExists: hks.useCrosschainQiStablecoinSlimV2Exists,
  useGainRatio: hks.useCrosschainQiStablecoinSlimV2GainRatio,
  useGetApproved: hks.useCrosschainQiStablecoinSlimV2GetApproved,
  useGetClosingFee: hks.useCrosschainQiStablecoinSlimV2GetClosingFee,
  useGetDebtCeiling: hks.useCrosschainQiStablecoinSlimV2GetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainQiStablecoinSlimV2GetEthPriceSource,
  useGetPaid: hks.useCrosschainQiStablecoinSlimV2GetPaid,
  useGetTokenPriceSource:
    hks.useCrosschainQiStablecoinSlimV2GetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainQiStablecoinSlimV2IsApprovedForAll,
  useIsOwner: hks.useCrosschainQiStablecoinSlimV2IsOwner,
  useLiquidateVault: hks.useCrosschainQiStablecoinSlimV2LiquidateVault,
  useLiquidateVaultEvent:
    hks.useCrosschainQiStablecoinSlimV2LiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainQiStablecoinSlimV2MaticDebt,
  useMinimumCollateralPercentage:
    hks.useCrosschainQiStablecoinSlimV2MinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOwner: hks.useCrosschainQiStablecoinSlimV2Owner,
  useOwnerOf: hks.useCrosschainQiStablecoinSlimV2OwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainQiStablecoinSlimV2OwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainQiStablecoinSlimV2PayBackToken,
  usePayBackTokenEvent: hks.useCrosschainQiStablecoinSlimV2PayBackTokenEvent,
  usePriceSourceDecimals:
    hks.useCrosschainQiStablecoinSlimV2PriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainQiStablecoinSlimV2RenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainQiStablecoinSlimV2SafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainQiStablecoinSlimV2SetApprovalForAll,
  useSetDebtRatio: hks.useCrosschainQiStablecoinSlimV2SetDebtRatio,
  useSetGainRatio: hks.useCrosschainQiStablecoinSlimV2SetGainRatio,
  useSetMinCollateralRatio:
    hks.useCrosschainQiStablecoinSlimV2SetMinCollateralRatio,
  useSetStabilityPool: hks.useCrosschainQiStablecoinSlimV2SetStabilityPool,
  useSetTokenUri: hks.useCrosschainQiStablecoinSlimV2SetTokenUri,
  useSetTreasury: hks.useCrosschainQiStablecoinSlimV2SetTreasury,
  useStabilityPool: hks.useCrosschainQiStablecoinSlimV2StabilityPool,
  useSupportsInterface: hks.useCrosschainQiStablecoinSlimV2SupportsInterface,
  useSymbol: hks.useCrosschainQiStablecoinSlimV2Symbol,
  useTokenByIndex: hks.useCrosschainQiStablecoinSlimV2TokenByIndex,
  useTokenOfOwnerByIndex:
    hks.useCrosschainQiStablecoinSlimV2TokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainQiStablecoinSlimV2TokenPeg,
  useTokenUri: hks.useCrosschainQiStablecoinSlimV2TokenUri,
  useTotalBorrowed: hks.useCrosschainQiStablecoinSlimV2TotalBorrowed,
  useTotalSupply: hks.useCrosschainQiStablecoinSlimV2TotalSupply,
  useTransferEvent: hks.useCrosschainQiStablecoinSlimV2TransferEvent,
  useTransferFrom: hks.useCrosschainQiStablecoinSlimV2TransferFrom,
  useTransferOwnership: hks.useCrosschainQiStablecoinSlimV2TransferOwnership,
  useTransferVaultEvent: hks.useCrosschainQiStablecoinSlimV2TransferVaultEvent,
  useTreasury: hks.useCrosschainQiStablecoinSlimV2Treasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainQiStablecoinSlimV2VaultCollateral,
  useVaultCount: hks.useCrosschainQiStablecoinSlimV2VaultCount,
  useVaultDebt: hks.useCrosschainQiStablecoinSlimV2VaultDebt,
  useWithdrawCollateral: hks.useCrosschainQiStablecoinSlimV2WithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainQiStablecoinSlimV2WithdrawCollateralEvent,
  useWrite: hks.useCrosschainQiStablecoinSlimV2Write,
  usePrepareApprove: hks.usePrepareCrosschainQiStablecoinSlimV2Approve,
  usePrepareBorrowToken: hks.usePrepareCrosschainQiStablecoinSlimV2BorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainQiStablecoinSlimV2Burn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainQiStablecoinSlimV2ChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainQiStablecoinSlimV2CreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainQiStablecoinSlimV2DepositCollateral,
  usePrepareDestroyVault:
    hks.usePrepareCrosschainQiStablecoinSlimV2DestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainQiStablecoinSlimV2GetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareCrosschainQiStablecoinSlimV2LiquidateVault,
  usePreparePayBackToken:
    hks.usePrepareCrosschainQiStablecoinSlimV2PayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainQiStablecoinSlimV2RenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainQiStablecoinSlimV2SafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainQiStablecoinSlimV2SetApprovalForAll,
  usePrepareSetDebtRatio:
    hks.usePrepareCrosschainQiStablecoinSlimV2SetDebtRatio,
  usePrepareSetGainRatio:
    hks.usePrepareCrosschainQiStablecoinSlimV2SetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainQiStablecoinSlimV2SetMinCollateralRatio,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainQiStablecoinSlimV2SetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainQiStablecoinSlimV2SetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainQiStablecoinSlimV2SetTreasury,
  usePrepareTransferFrom:
    hks.usePrepareCrosschainQiStablecoinSlimV2TransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainQiStablecoinSlimV2TransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainQiStablecoinSlimV2WithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainQiStablecoinSlimV2Write,
} as const;

const CrosschainQiStablecoinwbtc = {
  useApprovalEvent: hks.useCrosschainQiStablecoinwbtcApprovalEvent,
  useApprovalForAllEvent: hks.useCrosschainQiStablecoinwbtcApprovalForAllEvent,
  useApprove: hks.useCrosschainQiStablecoinwbtcApprove,
  useBalanceOf: hks.useCrosschainQiStablecoinwbtcBalanceOf,
  useBorrowTokenEvent: hks.useCrosschainQiStablecoinwbtcBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource:
    hks.useCrosschainQiStablecoinwbtcChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useCrosschainQiStablecoinwbtcCheckCollateralPercentage,
  useCheckCost: hks.useCrosschainQiStablecoinwbtcCheckCost,
  useCheckExtract: hks.useCrosschainQiStablecoinwbtcCheckExtract,
  useCheckLiquidation: hks.useCrosschainQiStablecoinwbtcCheckLiquidation,
  useClosingFee: hks.useCrosschainQiStablecoinwbtcClosingFee,
  useCollateral: hks.useCrosschainQiStablecoinwbtcCollateral,
  useCreateVault: hks.useCrosschainQiStablecoinwbtcCreateVault,
  useCreateVaultEvent: hks.useCrosschainQiStablecoinwbtcCreateVaultEvent,
  useDebtRatio: hks.useCrosschainQiStablecoinwbtcDebtRatio,
  useDepositCollateral: hks.useCrosschainQiStablecoinwbtcDepositCollateral,
  useDepositCollateralEvent:
    hks.useCrosschainQiStablecoinwbtcDepositCollateralEvent,
  useDestroyVault: hks.useCrosschainQiStablecoinwbtcDestroyVault,
  useDestroyVaultEvent: hks.useCrosschainQiStablecoinwbtcDestroyVaultEvent,
  useEthPriceSource: hks.useCrosschainQiStablecoinwbtcEthPriceSource,
  useEvent: hks.useCrosschainQiStablecoinwbtcEvent,
  useExists: hks.useCrosschainQiStablecoinwbtcExists,
  useGainRatio: hks.useCrosschainQiStablecoinwbtcGainRatio,
  useGetApproved: hks.useCrosschainQiStablecoinwbtcGetApproved,
  useGetClosingFee: hks.useCrosschainQiStablecoinwbtcGetClosingFee,
  useGetDebtCeiling: hks.useCrosschainQiStablecoinwbtcGetDebtCeiling,
  useGetEthPriceSource: hks.useCrosschainQiStablecoinwbtcGetEthPriceSource,
  useGetOpeningFee: hks.useCrosschainQiStablecoinwbtcGetOpeningFee,
  useGetPaid: hks.useCrosschainQiStablecoinwbtcGetPaid,
  useGetTokenPriceSource: hks.useCrosschainQiStablecoinwbtcGetTokenPriceSource,
  useIsApprovedForAll: hks.useCrosschainQiStablecoinwbtcIsApprovedForAll,
  useIsOwner: hks.useCrosschainQiStablecoinwbtcIsOwner,
  useLiquidateVault: hks.useCrosschainQiStablecoinwbtcLiquidateVault,
  useLiquidateVaultEvent: hks.useCrosschainQiStablecoinwbtcLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useCrosschainQiStablecoinwbtcMaticDebt,
  useCrosschainQiStablecoinwbtcMinimumCollateralPercentage:
    hks.useCrosschainQiStablecoinwbtcMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useCrosschainQiStablecoinwbtcOpeningFee,
  useOwner: hks.useCrosschainQiStablecoinwbtcOwner,
  useOwnerOf: hks.useCrosschainQiStablecoinwbtcOwnerOf,
  useOwnershipTransferredEvent:
    hks.useCrosschainQiStablecoinwbtcOwnershipTransferredEvent,
  usePayBackToken: hks.useCrosschainQiStablecoinwbtcPayBackToken,
  usePayBackTokenEvent: hks.useCrosschainQiStablecoinwbtcPayBackTokenEvent,
  usePriceSourceDecimals: hks.useCrosschainQiStablecoinwbtcPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useCrosschainQiStablecoinwbtcRenounceOwnership,
  useSafeTransferFrom: hks.useCrosschainQiStablecoinwbtcSafeTransferFrom,
  useSetApprovalForAll: hks.useCrosschainQiStablecoinwbtcSetApprovalForAll,
  useSetClosingFee: hks.useCrosschainQiStablecoinwbtcSetClosingFee,
  useSetDebtRatio: hks.useCrosschainQiStablecoinwbtcSetDebtRatio,
  useSetGainRatio: hks.useCrosschainQiStablecoinwbtcSetGainRatio,
  useSetMinCollateralRatio:
    hks.useCrosschainQiStablecoinwbtcSetMinCollateralRatio,
  useSetOpeningFee: hks.useCrosschainQiStablecoinwbtcSetOpeningFee,
  useSetStabilityPool: hks.useCrosschainQiStablecoinwbtcSetStabilityPool,
  useSetTokenUri: hks.useCrosschainQiStablecoinwbtcSetTokenUri,
  useSetTreasury: hks.useCrosschainQiStablecoinwbtcSetTreasury,
  useStabilityPool: hks.useCrosschainQiStablecoinwbtcStabilityPool,
  useSupportsInterface: hks.useCrosschainQiStablecoinwbtcSupportsInterface,
  useSymbol: hks.useCrosschainQiStablecoinwbtcSymbol,
  useTokenByIndex: hks.useCrosschainQiStablecoinwbtcTokenByIndex,
  useTokenOfOwnerByIndex: hks.useCrosschainQiStablecoinwbtcTokenOfOwnerByIndex,
  useTokenPeg: hks.useCrosschainQiStablecoinwbtcTokenPeg,
  useTokenUri: hks.useCrosschainQiStablecoinwbtcTokenUri,
  useTotalBorrowed: hks.useCrosschainQiStablecoinwbtcTotalBorrowed,
  useTotalSupply: hks.useCrosschainQiStablecoinwbtcTotalSupply,
  useTransferEvent: hks.useCrosschainQiStablecoinwbtcTransferEvent,
  useTransferFrom: hks.useCrosschainQiStablecoinwbtcTransferFrom,
  useTransferOwnership: hks.useCrosschainQiStablecoinwbtcTransferOwnership,
  useTransferVaultEvent: hks.useCrosschainQiStablecoinwbtcTransferVaultEvent,
  useTreasury: hks.useCrosschainQiStablecoinwbtcTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useCrosschainQiStablecoinwbtcVaultCollateral,
  useVaultCount: hks.useCrosschainQiStablecoinwbtcVaultCount,
  useVaultDebt: hks.useCrosschainQiStablecoinwbtcVaultDebt,
  useWithdrawCollateral: hks.useCrosschainQiStablecoinwbtcWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useCrosschainQiStablecoinwbtcWithdrawCollateralEvent,
  useWrite: hks.useCrosschainQiStablecoinwbtcWrite,
  usePrepareApprove: hks.usePrepareCrosschainQiStablecoinwbtcApprove,
  usePrepareBorrowToken: hks.usePrepareCrosschainQiStablecoinwbtcBorrowToken,
  usePrepareBurn: hks.usePrepareCrosschainQiStablecoinwbtcBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareCrosschainQiStablecoinwbtcChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareCrosschainQiStablecoinwbtcCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareCrosschainQiStablecoinwbtcDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareCrosschainQiStablecoinwbtcDestroyVault,
  usePrepareGetPaid: hks.usePrepareCrosschainQiStablecoinwbtcGetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareCrosschainQiStablecoinwbtcLiquidateVault,
  usePreparePayBackToken: hks.usePrepareCrosschainQiStablecoinwbtcPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareCrosschainQiStablecoinwbtcRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareCrosschainQiStablecoinwbtcSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareCrosschainQiStablecoinwbtcSetApprovalForAll,
  usePrepareSetClosingFee:
    hks.usePrepareCrosschainQiStablecoinwbtcSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareCrosschainQiStablecoinwbtcSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareCrosschainQiStablecoinwbtcSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareCrosschainQiStablecoinwbtcSetMinCollateralRatio,
  usePrepareSetOpeningFee:
    hks.usePrepareCrosschainQiStablecoinwbtcSetOpeningFee,
  usePrepareSetStabilityPool:
    hks.usePrepareCrosschainQiStablecoinwbtcSetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareCrosschainQiStablecoinwbtcSetTokenUri,
  usePrepareSetTreasury: hks.usePrepareCrosschainQiStablecoinwbtcSetTreasury,
  usePrepareTransferFrom: hks.usePrepareCrosschainQiStablecoinwbtcTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareCrosschainQiStablecoinwbtcTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareCrosschainQiStablecoinwbtcWithdrawCollateral,
  usePrepareWrite: hks.usePrepareCrosschainQiStablecoinwbtcWrite,
} as const;

const Erc20Stablecoin = {
  useApprovalEvent: hks.useErc20StablecoinApprovalEvent,
  useApprovalForAllEvent: hks.useErc20StablecoinApprovalForAllEvent,
  useApprove: hks.useErc20StablecoinApprove,
  useBalanceOf: hks.useErc20StablecoinBalanceOf,
  useBorrowTokenEvent: hks.useErc20StablecoinBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useErc20StablecoinChangeEthPriceSource,
  useCheckCollateralPercentage: hks.useErc20StablecoinCheckCollateralPercentage,
  useCheckCost: hks.useErc20StablecoinCheckCost,
  useCheckExtract: hks.useErc20StablecoinCheckExtract,
  useCheckLiquidation: hks.useErc20StablecoinCheckLiquidation,
  useClosingFee: hks.useErc20StablecoinClosingFee,
  useErc20StablecoinCollateral: hks.useErc20StablecoinCollateral,
  useCreateVault: hks.useErc20StablecoinCreateVault,
  useCreateVaultEvent: hks.useErc20StablecoinCreateVaultEvent,
  useDebtRatio: hks.useErc20StablecoinDebtRatio,
  useDepositCollateral: hks.useErc20StablecoinDepositCollateral,
  useDepositCollateralEvent: hks.useErc20StablecoinDepositCollateralEvent,
  useDestroyVault: hks.useErc20StablecoinDestroyVault,
  useDestroyVaultEvent: hks.useErc20StablecoinDestroyVaultEvent,
  useEthPriceSource: hks.useErc20StablecoinEthPriceSource,
  useEvent: hks.useErc20StablecoinEvent,
  useExists: hks.useErc20StablecoinExists,
  useGainRatio: hks.useErc20StablecoinGainRatio,
  useGetApproved: hks.useErc20StablecoinGetApproved,
  useGetClosingFee: hks.useErc20StablecoinGetClosingFee,
  useGetDebtCeiling: hks.useErc20StablecoinGetDebtCeiling,
  useGetEthPriceSource: hks.useErc20StablecoinGetEthPriceSource,
  useGetOpeningFee: hks.useErc20StablecoinGetOpeningFee,
  useGetPaid: hks.useErc20StablecoinGetPaid,
  useGetTokenPriceSource: hks.useErc20StablecoinGetTokenPriceSource,
  useIsApprovedForAll: hks.useErc20StablecoinIsApprovedForAll,
  useIsOwner: hks.useErc20StablecoinIsOwner,
  useLiquidateVault: hks.useErc20StablecoinLiquidateVault,
  useLiquidateVaultEvent: hks.useErc20StablecoinLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useErc20StablecoinMaticDebt,
  useMinimumCollateralPercentage:
    hks.useErc20StablecoinMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useErc20StablecoinOpeningFee,
  useOwner: hks.useErc20StablecoinOwner,
  useOwnerOf: hks.useErc20StablecoinOwnerOf,
  useOwnershipTransferredEvent: hks.useErc20StablecoinOwnershipTransferredEvent,
  usePayBackToken: hks.useErc20StablecoinPayBackToken,
  usePayBackTokenEvent: hks.useErc20StablecoinPayBackTokenEvent,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useErc20StablecoinRenounceOwnership,
  useSafeTransferFrom: hks.useErc20StablecoinSafeTransferFrom,
  useSetApprovalForAll: hks.useErc20StablecoinSetApprovalForAll,
  useSetClosingFee: hks.useErc20StablecoinSetClosingFee,
  useSetDebtRatio: hks.useErc20StablecoinSetDebtRatio,
  useSetGainRatio: hks.useErc20StablecoinSetGainRatio,
  useSetMinCollateralRatio: hks.useErc20StablecoinSetMinCollateralRatio,
  useSetOpeningFee: hks.useErc20StablecoinSetOpeningFee,
  useSetStabilityPool: hks.useErc20StablecoinSetStabilityPool,
  useSetTreasury: hks.useErc20StablecoinSetTreasury,
  useStabilityPool: hks.useErc20StablecoinStabilityPool,
  useSupportsInterface: hks.useErc20StablecoinSupportsInterface,
  useSymbol: hks.useErc20StablecoinSymbol,
  useTokenByIndex: hks.useErc20StablecoinTokenByIndex,
  useTokenOfOwnerByIndex: hks.useErc20StablecoinTokenOfOwnerByIndex,
  useTokenPeg: hks.useErc20StablecoinTokenPeg,
  useTokenUri: hks.useErc20StablecoinTokenUri,
  useTotalSupply: hks.useErc20StablecoinTotalSupply,
  useTransferEvent: hks.useErc20StablecoinTransferEvent,
  useTransferFrom: hks.useErc20StablecoinTransferFrom,
  useTransferOwnership: hks.useErc20StablecoinTransferOwnership,
  useTransferVaultEvent: hks.useErc20StablecoinTransferVaultEvent,
  useTreasury: hks.useErc20StablecoinTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useErc20StablecoinVaultCollateral,
  useVaultCount: hks.useErc20StablecoinVaultCount,
  useVaultDebt: hks.useErc20StablecoinVaultDebt,
  useWithdrawCollateral: hks.useErc20StablecoinWithdrawCollateral,
  useWithdrawCollateralEvent: hks.useErc20StablecoinWithdrawCollateralEvent,
  useWrite: hks.useErc20StablecoinWrite,
  usePrepareApprove: hks.usePrepareErc20StablecoinApprove,
  usePrepareBorrowToken: hks.usePrepareErc20StablecoinBorrowToken,
  usePrepareChangeEthPriceSource:
    hks.usePrepareErc20StablecoinChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareErc20StablecoinCreateVault,
  usePrepareDepositCollateral: hks.usePrepareErc20StablecoinDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareErc20StablecoinDestroyVault,
  usePrepareGetPaid: hks.usePrepareErc20StablecoinGetPaid,
  usePrepareLiquidateVault: hks.usePrepareErc20StablecoinLiquidateVault,
  usePreparePayBackToken: hks.usePrepareErc20StablecoinPayBackToken,
  usePrepareRenounceOwnership: hks.usePrepareErc20StablecoinRenounceOwnership,
  usePrepareSafeTransferFrom: hks.usePrepareErc20StablecoinSafeTransferFrom,
  usePrepareSetApprovalForAll: hks.usePrepareErc20StablecoinSetApprovalForAll,
  usePrepareSetClosingFee: hks.usePrepareErc20StablecoinSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareErc20StablecoinSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareErc20StablecoinSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareErc20StablecoinSetMinCollateralRatio,
  usePrepareSetOpeningFee: hks.usePrepareErc20StablecoinSetOpeningFee,
  usePrepareSetStabilityPool: hks.usePrepareErc20StablecoinSetStabilityPool,
  usePrepareSetTreasury: hks.usePrepareErc20StablecoinSetTreasury,
  usePrepareTransferFrom: hks.usePrepareErc20StablecoinTransferFrom,
  usePrepareTransferOwnership: hks.usePrepareErc20StablecoinTransferOwnership,
  usePrepareWithdrawCollateral: hks.usePrepareErc20StablecoinWithdrawCollateral,
  usePrepareWrite: hks.usePrepareErc20StablecoinWrite,
} as const;

const Erc20QiStablecoinwbtc = {
  useApprovalEvent: hks.useErc20QiStablecoinwbtcApprovalEvent,
  useApprovalForAllEvent: hks.useErc20QiStablecoinwbtcApprovalForAllEvent,
  useApprove: hks.useErc20QiStablecoinwbtcApprove,
  useBalanceOf: hks.useErc20QiStablecoinwbtcBalanceOf,
  useBorrowTokenEvent: hks.useErc20QiStablecoinwbtcBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useErc20QiStablecoinwbtcChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useErc20QiStablecoinwbtcCheckCollateralPercentage,
  useCheckCost: hks.useErc20QiStablecoinwbtcCheckCost,
  useCheckExtract: hks.useErc20QiStablecoinwbtcCheckExtract,
  useCheckLiquidation: hks.useErc20QiStablecoinwbtcCheckLiquidation,
  useClosingFee: hks.useErc20QiStablecoinwbtcClosingFee,
  useCollateral: hks.useErc20QiStablecoinwbtcCollateral,
  useCreateVault: hks.useErc20QiStablecoinwbtcCreateVault,
  useCreateVaultEvent: hks.useErc20QiStablecoinwbtcCreateVaultEvent,
  useDebtRatio: hks.useErc20QiStablecoinwbtcDebtRatio,
  useDepositCollateral: hks.useErc20QiStablecoinwbtcDepositCollateral,
  useDepositCollateralEvent: hks.useErc20QiStablecoinwbtcDepositCollateralEvent,
  useDestroyVault: hks.useErc20QiStablecoinwbtcDestroyVault,
  useDestroyVaultEvent: hks.useErc20QiStablecoinwbtcDestroyVaultEvent,
  useEthPriceSource: hks.useErc20QiStablecoinwbtcEthPriceSource,
  useEvent: hks.useErc20QiStablecoinwbtcEvent,
  useExists: hks.useErc20QiStablecoinwbtcExists,
  useGainRatio: hks.useErc20QiStablecoinwbtcGainRatio,
  useGetApproved: hks.useErc20QiStablecoinwbtcGetApproved,
  useGetClosingFee: hks.useErc20QiStablecoinwbtcGetClosingFee,
  useGetDebtCeiling: hks.useErc20QiStablecoinwbtcGetDebtCeiling,
  useGetEthPriceSource: hks.useErc20QiStablecoinwbtcGetEthPriceSource,
  useGetOpeningFee: hks.useErc20QiStablecoinwbtcGetOpeningFee,
  useGetPaid: hks.useErc20QiStablecoinwbtcGetPaid,
  useGetTokenPriceSource: hks.useErc20QiStablecoinwbtcGetTokenPriceSource,
  useIsApprovedForAll: hks.useErc20QiStablecoinwbtcIsApprovedForAll,
  useIsOwner: hks.useErc20QiStablecoinwbtcIsOwner,
  useLiquidateVault: hks.useErc20QiStablecoinwbtcLiquidateVault,
  useLiquidateVaultEvent: hks.useErc20QiStablecoinwbtcLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useErc20QiStablecoinwbtcMaticDebt,
  useMinimumCollateralPercentage:
    hks.useErc20QiStablecoinwbtcMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useErc20QiStablecoinwbtcOpeningFee,
  useOwner: hks.useErc20QiStablecoinwbtcOwner,
  useOwnerOf: hks.useErc20QiStablecoinwbtcOwnerOf,
  useOwnershipTransferredEvent:
    hks.useErc20QiStablecoinwbtcOwnershipTransferredEvent,
  usePayBackToken: hks.useErc20QiStablecoinwbtcPayBackToken,
  usePayBackTokenEvent: hks.useErc20QiStablecoinwbtcPayBackTokenEvent,
  usePriceSourceDecimals: hks.useErc20QiStablecoinwbtcPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useErc20QiStablecoinwbtcRenounceOwnership,
  useSafeTransferFrom: hks.useErc20QiStablecoinwbtcSafeTransferFrom,
  useSetApprovalForAll: hks.useErc20QiStablecoinwbtcSetApprovalForAll,
  useSetClosingFee: hks.useErc20QiStablecoinwbtcSetClosingFee,
  useSetDebtRatio: hks.useErc20QiStablecoinwbtcSetDebtRatio,
  useSetGainRatio: hks.useErc20QiStablecoinwbtcSetGainRatio,
  useSetMinCollateralRatio: hks.useErc20QiStablecoinwbtcSetMinCollateralRatio,
  useSetOpeningFee: hks.useErc20QiStablecoinwbtcSetOpeningFee,
  useSetStabilityPool: hks.useErc20QiStablecoinwbtcSetStabilityPool,
  useSetTreasury: hks.useErc20QiStablecoinwbtcSetTreasury,
  useStabilityPool: hks.useErc20QiStablecoinwbtcStabilityPool,
  useSupportsInterface: hks.useErc20QiStablecoinwbtcSupportsInterface,
  useSymbol: hks.useErc20QiStablecoinwbtcSymbol,
  useTokenByIndex: hks.useErc20QiStablecoinwbtcTokenByIndex,
  useTokenOfOwnerByIndex: hks.useErc20QiStablecoinwbtcTokenOfOwnerByIndex,
  useTokenPeg: hks.useErc20QiStablecoinwbtcTokenPeg,
  useTokenUri: hks.useErc20QiStablecoinwbtcTokenUri,
  useTotalSupply: hks.useErc20QiStablecoinwbtcTotalSupply,
  useTransferEvent: hks.useErc20QiStablecoinwbtcTransferEvent,
  useTransferFrom: hks.useErc20QiStablecoinwbtcTransferFrom,
  useTransferOwnership: hks.useErc20QiStablecoinwbtcTransferOwnership,
  useTransferVaultEvent: hks.useErc20QiStablecoinwbtcTransferVaultEvent,
  useTreasury: hks.useErc20QiStablecoinwbtcTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useErc20QiStablecoinwbtcVaultCollateral,
  useVaultCount: hks.useErc20QiStablecoinwbtcVaultCount,
  useVaultDebt: hks.useErc20QiStablecoinwbtcVaultDebt,
  useWithdrawCollateral: hks.useErc20QiStablecoinwbtcWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useErc20QiStablecoinwbtcWithdrawCollateralEvent,
  useWrite: hks.useErc20QiStablecoinwbtcWrite,
  usePrepareApprove: hks.usePrepareErc20QiStablecoinwbtcApprove,
  usePrepareBorrowToken: hks.usePrepareErc20QiStablecoinwbtcBorrowToken,
  usePrepareChangeEthPriceSource:
    hks.usePrepareErc20QiStablecoinwbtcChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareErc20QiStablecoinwbtcCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareErc20QiStablecoinwbtcDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareErc20QiStablecoinwbtcDestroyVault,
  usePrepareGetPaid: hks.usePrepareErc20QiStablecoinwbtcGetPaid,
  usePrepareLiquidateVault: hks.usePrepareErc20QiStablecoinwbtcLiquidateVault,
  usePreparePayBackToken: hks.usePrepareErc20QiStablecoinwbtcPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareErc20QiStablecoinwbtcRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareErc20QiStablecoinwbtcSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareErc20QiStablecoinwbtcSetApprovalForAll,
  usePrepareSetClosingFee: hks.usePrepareErc20QiStablecoinwbtcSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareErc20QiStablecoinwbtcSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareErc20QiStablecoinwbtcSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareErc20QiStablecoinwbtcSetMinCollateralRatio,
  usePrepareSetOpeningFee: hks.usePrepareErc20QiStablecoinwbtcSetOpeningFee,
  usePrepareSetStabilityPool:
    hks.usePrepareErc20QiStablecoinwbtcSetStabilityPool,
  usePrepareSetTreasury: hks.usePrepareErc20QiStablecoinwbtcSetTreasury,
  usePrepareTransferFrom: hks.usePrepareErc20QiStablecoinwbtcTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareErc20QiStablecoinwbtcTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareErc20QiStablecoinwbtcWithdrawCollateral,
  usePrepareWrite: hks.usePrepareErc20QiStablecoinwbtcWrite,
} as const;

const Erc20QiStablecoincamwbtc = {
  useApprovalEvent: hks.useErc20QiStablecoincamwbtcApprovalEvent,
  useApprovalForAllEvent: hks.useErc20QiStablecoincamwbtcApprovalForAllEvent,
  useApprove: hks.useErc20QiStablecoincamwbtcApprove,
  useBalanceOf: hks.useErc20QiStablecoincamwbtcBalanceOf,
  useBorrowTokenEvent: hks.useErc20QiStablecoincamwbtcBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useErc20QiStablecoincamwbtcChangeEthPriceSource,
  useCheckCollateralPercentage:
    hks.useErc20QiStablecoincamwbtcCheckCollateralPercentage,
  useCheckCost: hks.useErc20QiStablecoincamwbtcCheckCost,
  useCheckExtract: hks.useErc20QiStablecoincamwbtcCheckExtract,
  useCheckLiquidation: hks.useErc20QiStablecoincamwbtcCheckLiquidation,
  useClosingFee: hks.useErc20QiStablecoincamwbtcClosingFee,
  useCollateral: hks.useErc20QiStablecoincamwbtcCollateral,
  useCreateVault: hks.useErc20QiStablecoincamwbtcCreateVault,
  useCreateVaultEvent: hks.useErc20QiStablecoincamwbtcCreateVaultEvent,
  useDebtRatio: hks.useErc20QiStablecoincamwbtcDebtRatio,
  useDepositCollateral: hks.useErc20QiStablecoincamwbtcDepositCollateral,
  useDepositCollateralEvent:
    hks.useErc20QiStablecoincamwbtcDepositCollateralEvent,
  useDestroyVault: hks.useErc20QiStablecoincamwbtcDestroyVault,
  useDestroyVaultEvent: hks.useErc20QiStablecoincamwbtcDestroyVaultEvent,
  useEthPriceSource: hks.useErc20QiStablecoincamwbtcEthPriceSource,
  useEvent: hks.useErc20QiStablecoincamwbtcEvent,
  useExists: hks.useErc20QiStablecoincamwbtcExists,
  useGainRatio: hks.useErc20QiStablecoincamwbtcGainRatio,
  useGetApproved: hks.useErc20QiStablecoincamwbtcGetApproved,
  useGetClosingFee: hks.useErc20QiStablecoincamwbtcGetClosingFee,
  useGetDebtCeiling: hks.useErc20QiStablecoincamwbtcGetDebtCeiling,
  useGetEthPriceSource: hks.useErc20QiStablecoincamwbtcGetEthPriceSource,
  useGetOpeningFee: hks.useErc20QiStablecoincamwbtcGetOpeningFee,
  useGetPaid: hks.useErc20QiStablecoincamwbtcGetPaid,
  useGetTokenPriceSource: hks.useErc20QiStablecoincamwbtcGetTokenPriceSource,
  useIsApprovedForAll: hks.useErc20QiStablecoincamwbtcIsApprovedForAll,
  useIsOwner: hks.useErc20QiStablecoincamwbtcIsOwner,
  useLiquidateVault: hks.useErc20QiStablecoincamwbtcLiquidateVault,
  useLiquidateVaultEvent: hks.useErc20QiStablecoincamwbtcLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useErc20QiStablecoincamwbtcMaticDebt,
  useMinimumCollateralPercentage:
    hks.useErc20QiStablecoincamwbtcMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useErc20QiStablecoincamwbtcOpeningFee,
  useOwner: hks.useErc20QiStablecoincamwbtcOwner,
  useOwnerOf: hks.useErc20QiStablecoincamwbtcOwnerOf,
  useOwnershipTransferredEvent:
    hks.useErc20QiStablecoincamwbtcOwnershipTransferredEvent,
  usePayBackToken: hks.useErc20QiStablecoincamwbtcPayBackToken,
  usePayBackTokenEvent: hks.useErc20QiStablecoincamwbtcPayBackTokenEvent,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useErc20QiStablecoincamwbtcRenounceOwnership,
  useSafeTransferFrom: hks.useErc20QiStablecoincamwbtcSafeTransferFrom,
  useSetApprovalForAll: hks.useErc20QiStablecoincamwbtcSetApprovalForAll,
  useSetClosingFee: hks.useErc20QiStablecoincamwbtcSetClosingFee,
  useSetDebtRatio: hks.useErc20QiStablecoincamwbtcSetDebtRatio,
  useSetGainRatio: hks.useErc20QiStablecoincamwbtcSetGainRatio,
  useSetMinCollateralRatio:
    hks.useErc20QiStablecoincamwbtcSetMinCollateralRatio,
  useSetOpeningFee: hks.useErc20QiStablecoincamwbtcSetOpeningFee,
  useSetStabilityPool: hks.useErc20QiStablecoincamwbtcSetStabilityPool,
  useSetTreasury: hks.useErc20QiStablecoincamwbtcSetTreasury,
  useStabilityPool: hks.useErc20QiStablecoincamwbtcStabilityPool,
  useSupportsInterface: hks.useErc20QiStablecoincamwbtcSupportsInterface,
  useSymbol: hks.useErc20QiStablecoincamwbtcSymbol,
  useTokenByIndex: hks.useErc20QiStablecoincamwbtcTokenByIndex,
  useTokenOfOwnerByIndex: hks.useErc20QiStablecoincamwbtcTokenOfOwnerByIndex,
  useTokenPeg: hks.useErc20QiStablecoincamwbtcTokenPeg,
  useTokenUri: hks.useErc20QiStablecoincamwbtcTokenUri,
  useTotalSupply: hks.useErc20QiStablecoincamwbtcTotalSupply,
  useTransferEvent: hks.useErc20QiStablecoincamwbtcTransferEvent,
  useTransferFrom: hks.useErc20QiStablecoincamwbtcTransferFrom,
  useTransferOwnership: hks.useErc20QiStablecoincamwbtcTransferOwnership,
  useTransferVaultEvent: hks.useErc20QiStablecoincamwbtcTransferVaultEvent,
  useTreasury: hks.useErc20QiStablecoincamwbtcTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useErc20QiStablecoincamwbtcVaultCollateral,
  useVaultCount: hks.useErc20QiStablecoincamwbtcVaultCount,
  useVaultDebt: hks.useErc20QiStablecoincamwbtcVaultDebt,
  useWithdrawCollateral: hks.useErc20QiStablecoincamwbtcWithdrawCollateral,
  useWithdrawCollateralEvent:
    hks.useErc20QiStablecoincamwbtcWithdrawCollateralEvent,
  useWrite: hks.useErc20QiStablecoincamwbtcWrite,
  usePrepareApprove: hks.usePrepareErc20QiStablecoincamwbtcApprove,
  usePrepareBorrowToken: hks.usePrepareErc20QiStablecoincamwbtcBorrowToken,
  usePrepareChangeEthPriceSource:
    hks.usePrepareErc20QiStablecoincamwbtcChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareErc20QiStablecoincamwbtcCreateVault,
  usePrepareDepositCollateral:
    hks.usePrepareErc20QiStablecoincamwbtcDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareErc20QiStablecoincamwbtcDestroyVault,
  usePrepareGetPaid: hks.usePrepareErc20QiStablecoincamwbtcGetPaid,
  usePrepareLiquidateVault:
    hks.usePrepareErc20QiStablecoincamwbtcLiquidateVault,
  usePreparePayBackToken: hks.usePrepareErc20QiStablecoincamwbtcPayBackToken,
  usePrepareRenounceOwnership:
    hks.usePrepareErc20QiStablecoincamwbtcRenounceOwnership,
  usePrepareSafeTransferFrom:
    hks.usePrepareErc20QiStablecoincamwbtcSafeTransferFrom,
  usePrepareSetApprovalForAll:
    hks.usePrepareErc20QiStablecoincamwbtcSetApprovalForAll,
  usePrepareSetClosingFee: hks.usePrepareErc20QiStablecoincamwbtcSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareErc20QiStablecoincamwbtcSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareErc20QiStablecoincamwbtcSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareErc20QiStablecoincamwbtcSetMinCollateralRatio,
  usePrepareSetOpeningFee: hks.usePrepareErc20QiStablecoincamwbtcSetOpeningFee,
  usePrepareSetStabilityPool:
    hks.usePrepareErc20QiStablecoincamwbtcSetStabilityPool,
  usePrepareSetTreasury: hks.usePrepareErc20QiStablecoincamwbtcSetTreasury,
  usePrepareTransferFrom: hks.usePrepareErc20QiStablecoincamwbtcTransferFrom,
  usePrepareTransferOwnership:
    hks.usePrepareErc20QiStablecoincamwbtcTransferOwnership,
  usePrepareWithdrawCollateral:
    hks.usePrepareErc20QiStablecoincamwbtcWithdrawCollateral,
  usePrepareWrite: hks.usePrepareErc20QiStablecoincamwbtcWrite,
} as const;

const QiStablecoin = {
  useApprovalEvent: hks.useQiStablecoinApprovalEvent,
  useApprove: hks.useQiStablecoinApprove,
  useBalanceOf: hks.useQiStablecoinBalanceOf,
  useBorrowTokenEvent: hks.useQiStablecoinBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useQiStablecoinChangeEthPriceSource,
  useClosingFee: hks.useQiStablecoinClosingFee,
  useCreateVault: hks.useQiStablecoinCreateVault,
  useCreateVaultEvent: hks.useQiStablecoinCreateVaultEvent,
  useDepositCollateral: hks.useQiStablecoinDepositCollateral,
  useDepositCollateralEvent: hks.useQiStablecoinDepositCollateralEvent,
  useDestroyVault: hks.useQiStablecoinDestroyVault,
  useDestroyVaultEvent: hks.useQiStablecoinDestroyVaultEvent,
  useEthPriceSource: hks.useQiStablecoinEthPriceSource,
  useEvent: hks.useQiStablecoinEvent,
  useGetClosingFee: hks.useQiStablecoinGetClosingFee,
  useGetDebtCeiling: hks.useQiStablecoinGetDebtCeiling,
  useGetEthPriceSource: hks.useQiStablecoinGetEthPriceSource,
  useGetTokenPriceSource: hks.useQiStablecoinGetTokenPriceSource,
  useIsOwner: hks.useQiStablecoinIsOwner,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOwner: hks.useQiStablecoinOwner,
  useOwnershipTransferredEvent: hks.useQiStablecoinOwnershipTransferredEvent,
  usePayBackToken: hks.useQiStablecoinPayBackToken,
  usePayBackTokenEvent: hks.useQiStablecoinPayBackTokenEvent,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useQiStablecoinRenounceOwnership,
  useSetClosingFee: hks.useQiStablecoinSetClosingFee,
  useSetTreasury: hks.useQiStablecoinSetTreasury,
  useSymbol: hks.useQiStablecoinSymbol,
  useTotalSupply: hks.useQiStablecoinTotalSupply,
  useTransferEvent: hks.useQiStablecoinTransferEvent,
  useTransferFrom: hks.useQiStablecoinTransferFrom,
  useTransferOwnership: hks.useQiStablecoinTransferOwnership,
  useTransferVaultEvent: hks.useQiStablecoinTransferVaultEvent,
  useTreasury: hks.useQiStablecoinTreasury,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useQiStablecoinVaultCollateral,
  useVaultCount: hks.useQiStablecoinVaultCount,
  useVaultDebt: hks.useQiStablecoinVaultDebt,
  useWithdrawCollateral: hks.useQiStablecoinWithdrawCollateral,
  useWithdrawCollateralEvent: hks.useQiStablecoinWithdrawCollateralEvent,
  useWrite: hks.useQiStablecoinWrite,
  usePrepareApprove: hks.usePrepareQiStablecoinApprove,
  usePrepareBorrowToken: hks.usePrepareQiStablecoinBorrowToken,
  usePrepareBurn: hks.usePrepareQiStablecoinBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareQiStablecoinChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareQiStablecoinCreateVault,
  usePrepareDepositCollateral: hks.usePrepareQiStablecoinDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareQiStablecoinDestroyVault,
  usePreparePayBackToken: hks.usePrepareQiStablecoinPayBackToken,
  usePrepareRenounceOwnership: hks.usePrepareQiStablecoinRenounceOwnership,
  usePrepareSetClosingFee: hks.usePrepareQiStablecoinSetClosingFee,
  usePrepareSetTreasury: hks.usePrepareQiStablecoinSetTreasury,
  usePrepareTransferFrom: hks.usePrepareQiStablecoinTransferFrom,
  usePrepareTransferOwnership: hks.usePrepareQiStablecoinTransferOwnership,
  usePrepareWithdrawCollateral: hks.usePrepareQiStablecoinWithdrawCollateral,
  usePrepareWrite: hks.usePrepareQiStablecoinWrite,
} as const;

const StableQiVault = {
  useApprovalEvent: hks.useStableQiVaultApprovalEvent,
  useApprovalForAllEvent: hks.useStableQiVaultApprovalForAllEvent,
  useApprove: hks.useStableQiVaultApprove,
  useBalanceOf: hks.useStableQiVaultBalanceOf,
  useBorrowTokenEvent: hks.useStableQiVaultBorrowTokenEvent,
  useBurn: hks.useCrosschainNativeQiStablecoinBurn,
  useChangeEthPriceSource: hks.useStableQiVaultChangeEthPriceSource,
  useCheckCollateralPercentage: hks.useStableQiVaultCheckCollateralPercentage,
  useCheckCost: hks.useStableQiVaultCheckCost,
  useCheckExtract: hks.useStableQiVaultCheckExtract,
  useCheckLiquidation: hks.useStableQiVaultCheckLiquidation,
  useClosingFee: hks.useStableQiVaultClosingFee,
  useCollateral: hks.useStableQiVaultCollateral,
  useCreateVault: hks.useStableQiVaultCreateVault,
  useCreateVaultEvent: hks.useStableQiVaultCreateVaultEvent,
  useDebtRatio: hks.useStableQiVaultDebtRatio,
  useDepositCollateral: hks.useStableQiVaultDepositCollateral,
  useDepositCollateralEvent: hks.useStableQiVaultDepositCollateralEvent,
  useDestroyVault: hks.useStableQiVaultDestroyVault,
  useDestroyVaultEvent: hks.useStableQiVaultDestroyVaultEvent,
  useEthPriceSource: hks.useStableQiVaultEthPriceSource,
  useEvent: hks.useStableQiVaultEvent,
  useExists: hks.useStableQiVaultExists,
  useGainRatio: hks.useStableQiVaultGainRatio,
  useGetApproved: hks.useStableQiVaultGetApproved,
  useGetClosingFee: hks.useStableQiVaultGetClosingFee,
  useGetDebtCeiling: hks.useStableQiVaultGetDebtCeiling,
  useGetEthPriceSource: hks.useStableQiVaultGetEthPriceSource,
  useGetPaid: hks.useStableQiVaultGetPaid,
  useGetTokenPriceSource: hks.useStableQiVaultGetTokenPriceSource,
  useIsApprovedForAll: hks.useStableQiVaultIsApprovedForAll,
  useLiquidateVault: hks.useStableQiVaultLiquidateVault,
  useLiquidateVaultEvent: hks.useStableQiVaultLiquidateVaultEvent,
  useMai: hks.useCrosschainNativeQiStablecoinMai,
  useMaticDebt: hks.useStableQiVaultMaticDebt,
  useMinimumCollateralPercentage:
    hks.useStableQiVaultMinimumCollateralPercentage,
  useName: hks.useCrosschainNativeQiStablecoinName,
  useOpeningFee: hks.useStableQiVaultOpeningFee,
  useOwner: hks.useStableQiVaultOwner,
  useOwnerOf: hks.useStableQiVaultOwnerOf,
  useOwnershipTransferredEvent: hks.useStableQiVaultOwnershipTransferredEvent,
  usePayBackToken: hks.useStableQiVaultPayBackToken,
  usePayBackTokenEvent: hks.useStableQiVaultPayBackTokenEvent,
  usePriceSourceDecimals: hks.useStableQiVaultPriceSourceDecimals,
  useRead: hks.useCrosschainNativeQiStablecoinRead,
  useRenounceOwnership: hks.useStableQiVaultRenounceOwnership,
  useSafeTransferFrom: hks.useStableQiVaultSafeTransferFrom,
  useSetApprovalForAll: hks.useStableQiVaultSetApprovalForAll,
  useSetClosingFee: hks.useStableQiVaultSetClosingFee,
  useSetDebtRatio: hks.useStableQiVaultSetDebtRatio,
  useSetGainRatio: hks.useStableQiVaultSetGainRatio,
  useSetMinCollateralRatio: hks.useStableQiVaultSetMinCollateralRatio,
  useSetOpeningFee: hks.useStableQiVaultSetOpeningFee,
  useSetStabilityPool: hks.useStableQiVaultSetStabilityPool,
  useSetTokenUri: hks.useStableQiVaultSetTokenUri,
  useStabilityPool: hks.useStableQiVaultStabilityPool,
  useSupportsInterface: hks.useStableQiVaultSupportsInterface,
  useSymbol: hks.useStableQiVaultSymbol,
  useTokenByIndex: hks.useStableQiVaultTokenByIndex,
  useTokenOfOwnerByIndex: hks.useStableQiVaultTokenOfOwnerByIndex,
  useTokenPeg: hks.useStableQiVaultTokenPeg,
  useTokenUri: hks.useStableQiVaultTokenUri,
  useTotalBorrowed: hks.useStableQiVaultTotalBorrowed,
  useTotalSupply: hks.useStableQiVaultTotalSupply,
  useTransferEvent: hks.useStableQiVaultTransferEvent,
  useTransferFrom: hks.useStableQiVaultTransferFrom,
  useTransferOwnership: hks.useStableQiVaultTransferOwnership,
  useUri: hks.useCrosschainNativeQiStablecoinUri,
  useVaultCollateral: hks.useStableQiVaultVaultCollateral,
  useVaultCount: hks.useStableQiVaultVaultCount,
  useVaultDebt: hks.useStableQiVaultVaultDebt,
  useWithdrawCollateral: hks.useStableQiVaultWithdrawCollateral,
  useWithdrawCollateralEvent: hks.useStableQiVaultWithdrawCollateralEvent,
  useWrite: hks.useStableQiVaultWrite,
  usePrepareApprove: hks.usePrepareStableQiVaultApprove,
  usePrepareBorrowToken: hks.usePrepareStableQiVaultBorrowToken,
  usePrepareBurn: hks.usePrepareStableQiVaultBurn,
  usePrepareChangeEthPriceSource:
    hks.usePrepareStableQiVaultChangeEthPriceSource,
  usePrepareCreateVault: hks.usePrepareStableQiVaultCreateVault,
  usePrepareDepositCollateral: hks.usePrepareStableQiVaultDepositCollateral,
  usePrepareDestroyVault: hks.usePrepareStableQiVaultDestroyVault,
  usePrepareGetPaid: hks.usePrepareStableQiVaultGetPaid,
  usePrepareLiquidateVault: hks.usePrepareStableQiVaultLiquidateVault,
  usePreparePayBackToken: hks.usePrepareStableQiVaultPayBackToken,
  usePrepareRenounceOwnership: hks.usePrepareStableQiVaultRenounceOwnership,
  usePrepareSafeTransferFrom: hks.usePrepareStableQiVaultSafeTransferFrom,
  usePrepareSetApprovalForAll: hks.usePrepareStableQiVaultSetApprovalForAll,
  usePrepareSetClosingFee: hks.usePrepareStableQiVaultSetClosingFee,
  usePrepareSetDebtRatio: hks.usePrepareStableQiVaultSetDebtRatio,
  usePrepareSetGainRatio: hks.usePrepareStableQiVaultSetGainRatio,
  usePrepareSetMinCollateralRatio:
    hks.usePrepareStableQiVaultSetMinCollateralRatio,
  usePrepareSetOpeningFee: hks.usePrepareStableQiVaultSetOpeningFee,
  usePrepareSetStabilityPool: hks.usePrepareStableQiVaultSetStabilityPool,
  usePrepareSetTokenUri: hks.usePrepareStableQiVaultSetTokenUri,
  usePrepareTransferFrom: hks.usePrepareStableQiVaultTransferFrom,
  usePrepareTransferOwnership: hks.usePrepareStableQiVaultTransferOwnership,
  usePrepareWithdrawCollateral: hks.usePrepareStableQiVaultWithdrawCollateral,
  usePrepareWrite: hks.usePrepareStableQiVaultWrite,
} as const;

export type VaultMethods =
  | typeof CrosschainNativeQiStablecoin
  | typeof CrosschainQiStablecoin
  | typeof CrosschainQiStablecoinV2
  | typeof CrosschainQiStablecoinSlim
  | typeof CrosschainQiStablecoinSlimV2
  | typeof CrosschainQiStablecoinwbtc
  | typeof Erc20QiStablecoincamwbtc
  | typeof Erc20Stablecoin
  | typeof Erc20QiStablecoinwbtc
  | typeof QiStablecoin
  | typeof StableQiVault;

export const Lookup = {
  CrosschainNativeQiStablecoin: CrosschainNativeQiStablecoin,
  CrosschainQiStablecoin: CrosschainQiStablecoin,
  CrosschainQiStablecoinSlim: CrosschainQiStablecoinSlim,
  CrosschainQiStablecoinSlimV2: CrosschainQiStablecoinSlimV2,
  CrosschainQiStablecoinV2: CrosschainQiStablecoinV2,
  CrosschainQiStablecoinwbtc: CrosschainQiStablecoinwbtc,
  Erc20QiStablecoincamwbtc: Erc20QiStablecoincamwbtc,
  Erc20QiStablecoinwbtc: Erc20QiStablecoinwbtc,
  Erc20Stablecoin: Erc20Stablecoin,
  QiStablecoin: QiStablecoin,
  StableQiVault: StableQiVault,
} as const;

export {
  CrosschainNativeQiStablecoin,
  CrosschainQiStablecoin,
  CrosschainQiStablecoinV2,
  CrosschainQiStablecoinSlim,
  CrosschainQiStablecoinSlimV2,
  CrosschainQiStablecoinwbtc,
  Erc20Stablecoin,
  Erc20QiStablecoinwbtc,
  QiStablecoin,
  StableQiVault,
};
